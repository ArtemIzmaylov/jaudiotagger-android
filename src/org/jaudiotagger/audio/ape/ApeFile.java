package org.jaudiotagger.audio.ape;

import androidx.annotation.NonNull;

import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.CannotWriteException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.logging.Hex;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;
import org.jaudiotagger.tag.TagNotFoundException;
import org.jaudiotagger.tag.ape.APEv2Tag;
import org.jaudiotagger.tag.id3.AbstractID3v2Tag;
import org.jaudiotagger.tag.id3.ID3v11Tag;
import org.jaudiotagger.tag.id3.ID3v1Tag;
import org.jaudiotagger.tag.id3.ID3v22Tag;
import org.jaudiotagger.tag.id3.ID3v23Tag;
import org.jaudiotagger.tag.id3.ID3v24Tag;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;

/**
 * This class represents a physical MP3 File
 * <br>
 * @author Artem Izmaylov (www.aimp.ru)
 **/
public class ApeFile extends AudioFile
{
    private APEv2Tag apev2Tag;
    private ID3v1Tag id3v1tag;
    private AbstractID3v2Tag id3v2tag;

    public ApeFile()
    {
    }

    /**
     * Creates a new APEFile datatype and parse the tag from the given filename.
     *
     * @param filename APE file
     * @throws IOException  on any I/O error
     * @throws TagException on any exception generated by this library.
     * @throws org.jaudiotagger.audio.exceptions.ReadOnlyFileException
     */
    public ApeFile(String filename) throws IOException, TagException, ReadOnlyFileException, CannotReadException
    {
        this(new File(filename));
    }

    public ApeFile(File file) throws IOException, TagException, ReadOnlyFileException, CannotReadException
    {
        this(file, false);
    }

    public ApeFile(File file, boolean readOnly) throws IOException, ReadOnlyFileException, CannotReadException, TagException
    {
        this.file = file;
        try (RandomAccessFile newFile = checkFilePermissions(file, readOnly))
        {
            // Read ID3v2 tag size (if tag exists) to allow audioHeader parsing to skip over tag
            long id3v2size = AbstractID3v2Tag.getV2TagSizeIfExists(file);
            logger.config("ID3v2.size:" + Hex.asHex(id3v2size));
            audioHeader = new ApeAudioHeader(newFile, id3v2size);

            // Read ID3v2 tags
            readID3V2Tag(newFile, (int)id3v2size);
            // Read ID3v1 tags
            readID3V1Tag(newFile);
            // Read APEv2 tags (MUST BE after ID3v1)
            readAPEv2Tag(newFile);

            if (apev2Tag != null)
                tag = apev2Tag;
            else if (id3v2tag != null)
                tag = id3v2tag;
            else
                tag = id3v1tag;
        }
    }

    @Override
    public void commit() throws CannotWriteException
    {
        try
        {
            save(this.file);
        }
        catch (Exception e)
        {
            throw new CannotWriteException(e.getMessage());
        }
    }

    public void save(@NonNull File file) throws IOException
    {
        try (RandomAccessFile rFile = new RandomAccessFile(file, "rw"))
        {
            // write or remove ID3v2
            if (id3v2tag != null)
                id3v2tag.write(rFile);
            else
            {
                logger.config("Deleting ID3v2 tag:"+file.getName());
                (new ID3v24Tag()).delete(rFile);
                (new ID3v23Tag()).delete(rFile);
                (new ID3v22Tag()).delete(rFile);
            }

            // write or remove APEv2
            if (apev2Tag != null)
                apev2Tag.write(rFile);
            else
                APEv2Tag.delete(rFile);

            // write ID3v1
            if (id3v1tag != null)
                id3v1tag.write(rFile);
            else
                (new ID3v1Tag()).delete(rFile);
        }
    }

    @Override
    public Tag createDefaultTag()
    {
        return new APEv2Tag();
    }

    public APEv2Tag getAPEv2Tag()
    {
        return apev2Tag;
    }

    public ID3v1Tag getID3v1Tag()
    {
        return id3v1tag;
    }

    public AbstractID3v2Tag getID3v2Tag()
    {
        return id3v2tag;
    }

    public void setAPEv2Tag(APEv2Tag tag)
    {
        apev2Tag = tag;
    }

    public void setID3v1Tag(ID3v1Tag tag)
    {
        id3v1tag = tag;
    }

    public void setID3v2Tag(AbstractID3v2Tag tag)
    {
        id3v2tag = tag;
    }

    @Override
    public void setTag(Tag tag)
    {
        super.setTag(tag);
        if (tag instanceof ID3v1Tag)
            setID3v1Tag((ID3v1Tag)tag);
        if (tag instanceof AbstractID3v2Tag)
            setID3v2Tag((AbstractID3v2Tag)tag);
        if (tag instanceof APEv2Tag)
            setAPEv2Tag((APEv2Tag)tag);
    }

    private void readAPEv2Tag(RandomAccessFile newFile) throws IOException
    {
        logger.finer("Attempting to read APEv2 tags");
        try
        {
            setAPEv2Tag(new APEv2Tag(newFile, id3v1tag != null ? id3v1tag.getSize() : 0));
        }
        catch (TagNotFoundException e)
        {
            logger.config("No APEv2 tag found");
        }
        catch (TagException e)
        {
            throw new IOException(e);
        }
    }

    private void readID3V1Tag(RandomAccessFile newFile) throws IOException
    {
        logger.finer("Attempting to read ID3v1 tags");
        try
        {
            setID3v1Tag(new ID3v11Tag(newFile, file.getName()));
        }
        catch (TagNotFoundException e1)
        {
            logger.config("No ID3v11 tag found");
            try
            {
                setID3v1Tag(new ID3v1Tag(newFile, file.getName()));
            }
            catch (TagNotFoundException e2)
            {
                logger.config("No ID3v1 tag found");
            }
        }
    }

    @SuppressWarnings("ChannelOpenedButNotSafelyClosed")
    private void readID3V2Tag(RandomAccessFile newFile, int size) throws IOException, TagException
    {
        if (size < AbstractID3v2Tag.TAG_HEADER_LENGTH)
        {
            logger.config("Not enough space for valid ID3v2 tag:" + size);
            return;
        }

        logger.finer("Attempting to read ID3v2 tags");

        ByteBuffer bb = ByteBuffer.allocateDirect(size);
        newFile.seek(0);
        newFile.getChannel().read(bb, 0);
        bb.rewind();

        logger.config("Attempting to read ID3v2 tags");
        try
        {
            setID3v2Tag(new ID3v24Tag(bb, file.getName()));
        }
        catch (TagNotFoundException ex)
        {
            logger.config("No id3v24 tag found");
        }

        try
        {
            if (id3v2tag == null)
                setID3v2Tag(new ID3v23Tag(bb, file.getName()));
        }
        catch (TagNotFoundException ex)
        {
            logger.config("No id3v23 tag found");
        }

        try
        {
            if (id3v2tag == null)
                setID3v2Tag(new ID3v22Tag(bb, file.getName()));
        }
        catch (TagNotFoundException ex)
        {
            logger.config("No id3v22 tag found");
        }
    }

    public static int readInt(RandomAccessFile file) throws IOException
    {
        return Integer.reverseBytes(file.readInt());
    }

    public static int readUnsignedShort(RandomAccessFile file) throws IOException
    {
        return Short.toUnsignedInt(Short.reverseBytes(file.readShort()));
    }

    public static void writeInt(RandomAccessFile file, int value) throws IOException
    {
        file.writeInt(Integer.reverseBytes(value));
    }
}